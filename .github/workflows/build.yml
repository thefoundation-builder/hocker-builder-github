name: Build

# Controls when the workflow will run
on:
  push:
    branches:
      - 'master'
      - 'main'
#    tags:
#      - 'v*.*.*'
  pull_request:
    branches:
      - 'dev'
      - 'testing'
  schedule:
    - cron: '0 0 1 * *'
# Run monthly, at 00:00 on the 1st day of month.
##########################

# permissions are needed if pushing to ghcr.io
permissions:
  packages: write

env:
  REGISTRY_GITHUB: ghcr.io
  REGISTRY_DOCKER: index.docker.io
  GH_IMAGE_NAME: ${{ github.repository }}


jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  upstream:
    runs-on: ubuntu-latest
    environment: build
    permissions:
      packages: read
      contents: read
    if: github.repository_owner == 'TheFoundation'
    steps:
      - uses: actions/checkout@v3
      - name: prep-downstream
        run: |
             mkdir downstream
             cp -aurv _build_hocker.sh .github downstream &
             tar cv . |md5sum |cut -d" " -f1 > downstream/.md5sum_of_tar
             bash build/_generate_downstream_readme.sh thefoundation-builder hocker-builder-github > downstream/README.md
             wait
#      - uses: cpina/github-action-push-to-another-repository@main
      - uses: TheFoundation/github-action-push-to-another-repository@main
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
#          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'downstream'
          destination-github-username: 'thefoundation-builder'
          destination-repository-name: 'hocker-builder-github'
          user-email: actions@github.com
          target-branch: main

  build-base-focal:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}

    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh base-focal "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs

  scan-base-focal:
    runs-on: ubuntu-latest
    needs: build-base-focal
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:base-focal;docker image ls "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:base-focal'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"
  build-base-bionic:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }};echo "$REGISTRY_USER"|base64 -w0 ;bash _build_hocker.sh base-bionic "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-base-bionic:
    runs-on: ubuntu-latest
    needs: build-base-bionic
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:base-bionic;docker image ls "
      - name: Trivy vulnerability scan @ baseimage-bionic
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:base-bionic'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-bionic
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"


  build-php80-alpine-nomysql:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
#    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php80-nomysql-alpine"
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs


  build-php80-alpine:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
#    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php80-alpine "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-php80-alpine:
    runs-on: ubuntu-latest
    needs: build-php80-alpine
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:php8.0-alpine-dropbear-fpm ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:php8.0-alpine-dropbear-fpm'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php81-alpine-nomysql:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
#    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php81-nomysql-alpine"
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs


  build-php81-alpine:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
#    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php81-alpine "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-php81-alpine:
    runs-on: ubuntu-latest
    needs: build-php81-alpine
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:php8.0-alpine-dropbear-fpm ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:php8.0-alpine-dropbear-fpm'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php81-nomysql:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php81-nomysql "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs

  build-php81-mini:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php81-mini "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  build-php81-maxi:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php81-maxi "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-php81-maxi:
    runs-on: ubuntu-latest
    needs: build-php81-maxi
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:php8.1-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:php8.1-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php80-nomysql:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php80-nomysql "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs

  build-php80-mini:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-php80-nomysql ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php80-mini "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  build-php80-maxi:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php80-maxi "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-php80-maxi:
    runs-on: ubuntu-latest
    needs: build-php80-maxi
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:php8.0-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:php8.0-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php74-nomysql:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php74-nomysql "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs

  build-php74-mini:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php74-mini "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  build-php74-maxi:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php74-maxi "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-php74-maxi:
    runs-on: ubuntu-latest
    needs: build-php74-maxi
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:php7.4-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:php7.4-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php72-nomysql:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-bionic ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php72-nomysql "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs

  build-php72-mini:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-bionic ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php72-mini "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  build-php72-maxi:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-bionic ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php72-maxi "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-php72-maxi:
    runs-on: ubuntu-latest
    needs: build-php72-maxi
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:php7.2-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:php7.2-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"


  build-php56:
    runs-on: ubuntu-latest
    env:
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-bionic ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: docker image ls
      - name: build images
        run: sudo /bin/bash -c "export REGISTRY_PASSWORD=$REGISTRY_PASSWORD;export REGISTRY_HOST=docker.io;export REGISTRY_PROJECT=thefoundation;export PROJECT_NAME=hocker;export REGISTRY_USER=${{ secrets.REGISTRY_USER }} ;bash _build_hocker.sh php5 "
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
  scan-php56:
    runs-on: ubuntu-latest
    needs: build-php56
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull docker.io/thefoundation/hocker:php5.6-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/thefoundation/hocker:php5.6-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

#    - name: go to repo and build
#      run: sudo /bin/bash -c "cd Hocker;/bin/bash _build.hocker.sh base-bionic"
#            !build/**/*.md
###    - name: Login
###      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
###    - name: Run Buildx
###      env:
##         EZORED_AWS_KEY_ID: ${{ secrets.EZORED_AWS_KEY_ID }}
##         EZORED_AWS_SECRET_KEY: ${{ secrets.EZORED_AWS_SECRET_KEY }}
###      run: |
###       docker buildx build -f Dockerfile -t ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:latest --output "type=image,push=true" --platform linux/amd64,linux/arm/v7,linux/arm64 .
##
