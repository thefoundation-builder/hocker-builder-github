name: Build

# Controls when the workflow will run
on:
  push:
    branches:
      - 'master'
      - 'main'
#    tags:
#      - 'v*.*.*'
  pull_request:
    branches:
      - 'dev'
      - 'testing'
  schedule:
    - cron: '0 0 * * 0'
# Run sunday, at 00:00
##########################

# permissions are needed if pushing to ghcr.io
permissions:
  packages: write

env:
  REGISTRY_GITHUB: ghcr.io
  REGISTRY_DOCKER: index.docker.io
  GH_IMAGE_NAME: ${{ github.repository }}
  REGISTRY_HOST: quay.io
  REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
  REGISTRY_USER: ${{ secrets.QUAY_USER }}
  CICACHETAG: quay.io/buildcache_thefoundation/cicache

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  upstream:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    environment: build
    permissions:
      packages: read
      contents: read
    ## ONLY on https://github.com/thefoundation/ -> push to the builder repo
    if: github.repository_owner == 'TheFoundation'
    steps:
      - uses: actions/checkout@v3
      - name: prep-downstream
        run: |
             mkdir downstream
             cp -aurv _build_hocker.sh .github downstream &
             tar cv . |md5sum |cut -d" " -f1 > downstream/.md5sum_of_tar
             bash build/_generate_downstream_readme.sh thefoundation-builder hocker-builder-github > downstream/README.md
             wait
#      - uses: cpina/github-action-push-to-another-repository@main
      - uses: TheFoundation/github-action-push-to-another-repository@main
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
#          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'downstream'
          destination-github-username: 'thefoundation-builder'
          destination-repository-name: 'hocker-builder-github'
          user-email: actions@github.com
          target-branch: main

  build-base-focal:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}

    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - id: check_build_baseimage
        # Give an id to the step, so we can reference it later
        run: |
          echo "Detecting changed files"
          #echo "adding current path as safe dir"
          git config --global --add safe.directory  $(pwd)
          #echo "remoteURL is "$(git config --get remote.origin.url)
          #git clone $(git config --get remote.origin.url) /tmp/cleancheckout
          echo "Diff HEAD with the previous commit"
          diffed=$(git log -1 --oneline --name-only --pretty='' HEAD)
          changestatus=false
          echo "FILES CHANGED IN LAST COMMIT"
          echo "$diffed"
          # Check if a file under docs/ or with the .md extension has changed (added, modified, deleted)
          echo "$diffed"  |grep -q -e "^build/Dockerfile-base-focal$" && changestatus=true
          # Check if our baseimage is older than a week
          docker pull  $REGISTRY_HOST/thefoundation/hocker:base-focal
          imageagedays=$(( ( $(date +%s ) - $(date --date=$(docker image inspect $REGISTRY_HOST/thefoundation/hocker:base-focal | jq .[]."Created" --raw-output) +%s) ) /(60*60*24) ))
          maxaimageage=2
          [[ "$imageagedays" -gt "$maximageage" ]] && changestatus=true
          echo "answer to the did-files-change question is "$changestatus
          # Set the output named "do_the_build"
          ## DEPRECATED#echo#"::set-output name=do_the_build::$changestatus"
          echo "do_the_build=$changestatus" >> $GITHUB_OUTPUT
          #Write-Host "::set-output name=do_the_build::$HasDiff"
      - name: NOTICE SKIP
        if: steps.check_build_baseimage.outputs.do_the_build== 'false'
        run: echo "BUILDING SKIPPED"
      - name: Set up QEMU
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh base-focal " 2>&1
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        run: grep ^0$ /tmp/hocker.build.result

  scan-base-focal:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-base-focal
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:base-focal;docker image ls "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:base-focal'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"
  build-base-bionic:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - id: check_build_baseimage
        # Give an id to the step, so we can reference it later
        run: |
          echo "Detecting changed files"
          #echo "adding current path as safe dir"
          git config --global --add safe.directory  $(pwd)
          #echo "remoteURL is "$(git config --get remote.origin.url)
          #git clone $(git config --get remote.origin.url) /tmp/cleancheckout
          echo "Diff HEAD with the previous commit"
          diffed=$(git log -1 --oneline --name-only --pretty='' HEAD)
          changestatus=false
          echo "FILES CHANGED IN LAST COMMIT"
          echo "$diffed"
          # Check if a file under docs/ or with the .md extension has changed (added, modified, deleted)
          echo "$diffed"  |grep -q -e "^build/Dockerfile-base-bionic$" && changestatus=true
          # Check if our baseimage is older than a week
          docker pull  $REGISTRY_HOST/thefoundation/hocker:base-bionic
          imageagedays=$(( ( $(date +%s ) - $(date --date=$(docker image inspect $REGISTRY_HOST/thefoundation/hocker:base-bionic | jq .[]."Created" --raw-output) +%s) ) /(60*60*24) ))
          maxaimageage=2
          [[ "$imageagedays" -gt "$maximageage" ]] && changestatus=true
          echo "answer to the did-files-change question is "$changestatus
          # Set the output named "do_the_build"
          ## DEPRECATED#echo#"::set-output name=do_the_build::$changestatus"
          echo "do_the_build=$changestatus" >> $GITHUB_OUTPUT
          #Write-Host "::set-output name=do_the_build::$HasDiff"
      - name: NOTICE SKIP
        if: steps.check_build_baseimage.outputs.do_the_build== 'false'
        run: echo "BUILDING SKIPPED"
      - name: Set up QEMU
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh base-bionic " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        if: steps.check_build_baseimage.outputs.do_the_build== 'true'
        run: grep ^0$ /tmp/hocker.build.result
  scan-base-bionic:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-base-bionic
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:base-bionic;docker image ls "
      - name: Trivy vulnerability scan @ baseimage-bionic
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:base-bionic'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-bionic
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"


  build-php80-alpine-nomysql:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
#    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php80-nomysql-alpine" 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result


  build-php80-alpine:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
#    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php80-alpine " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  scan-php80-alpine:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-php80-alpine
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:php8.0-alpine-dropbear-fpm ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:php8.0-alpine-dropbear-fpm'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php81-alpine-nomysql:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
#    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php81-nomysql-alpine" 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result


  build-php81-alpine:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
#    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php81-alpine " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  scan-php81-alpine:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-php81-alpine
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:php8.0-alpine-dropbear-fpm ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:php8.0-alpine-dropbear-fpm'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php81-nomysql:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php81-nomysql " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result

  build-php81-mini:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php81-mini " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  build-php81-maxi:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php81-maxi " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  scan-php81-maxi:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-php81-maxi
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:php8.1-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:php8.1-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php80-nomysql:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php80-nomysql " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result

  build-php80-mini:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-php80-nomysql ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php80-mini " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  build-php80-maxi:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php80-maxi " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  scan-php80-maxi:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-php80-maxi
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:php8.0-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:php8.0-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php74-nomysql:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php74-nomysql " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result

  build-php74-mini:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php74-mini " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  build-php74-maxi:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-focal ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php74-maxi " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  scan-php74-maxi:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-php74-maxi
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:php7.4-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:php7.4-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

  build-php72-nomysql:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-bionic ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php72-nomysql " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result

  build-php72-mini:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-bionic ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php72-mini " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  build-php72-maxi:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-bionic ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") ' || true  &&  ( (docker image ls |grep ^node |sed 's/ \+/ /g'|cut -d" " -f3)|while read thing ;do docker rmi $thing;done )   || true  &&  docker image ls
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php72-maxi " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
             grep ^0$ /tmp/hocker.build.result
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  scan-php72-maxi:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-php72-maxi
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:php7.2-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:php7.2-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"


  build-php56:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
      REGISTRY_USER: ${{ secrets.QUAY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.QUAY_PASS }}
    environment: push-dockerhub
    permissions:
      packages: write
      contents: read
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/buildcache_persist/registry:/var/lib/registry
#      ultra-apt-cacher:
#        image: registry.gitlab.com/the-foundation/ultra-apt-cacher-ng
#        ports:
#          - 3142:3142
#        volumes:
#          - /tmp/buildcache_persist/apt-cacher-ng:/var/cache/apt-cacher-ng
    if: github.repository_owner == 'thefoundation-builder'
    needs: [ build-base-bionic ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: /bin/bash -c 'docker rmi $(docker image  ls --filter=reference="node:*" |grep -v  " ") $(docker image  ls|grep node |cut -f1 |cut -d" " -f1) ;docker image ls '
      - name: build images
        run: |
             date +%s > /tmp/.buildstart
             git clone https://gitlab.com/the-foundation/bash-logger.git /tmp/bash-logger
             echo  export REGISTRY_PASSWORD="$REGISTRY_PASSWORD" > .buildenv;
             echo  export REGISTRY_HOST="$REGISTRY_HOST" >> .buildenv ;
             (echo export REGISTRY_PROJECT=thefoundation;echo export PROJECT_NAME=hocker) >> .buildenv;
             echo  export REGISTRY_USER="$REGISTRY_USER" >> .buildenv ;
             (echo export APT_HTTP_PROXY_URL=${{ secrets.APT_HTTP_PROXY_URL }} ; echo export CACHE_REGISTRY_HOST=ghcr.io ; echo export CACHE_REGISTRY_USER=${{ github.actor }};echo export CACHE_REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}; )>> .buildenv
             mkfifo /tmp/logpipe ; echo -11| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g');echo 0|bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/logpipe | while read line;do echo "$line" >&2 ;echo "$line"  ;done | tr -d '\000-\010\013\014\016-\037'|sed -u  's/\r/\n/g'|grep --line-buffered -v ^$ | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildlog FALSE $(echo ${{ github.job }}|sed 's/build-//g') "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g') info &
             sudo /bin/bash -c "grep -v PASS .buildenv ; test -e /tmp/buildcache_persist || mkdir /tmp/buildcache_persist;source .buildenv;bash _build_hocker.sh php5 " 2>&1 |tee /tmp/logpipe &>/dev/null
             bash -c 'timediff=$(($(date +%s)-$(cat /tmp/.buildstart)));echo $timediff'| bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildtime "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             cat /tmp/hocker.build.result | bash /tmp/bash-logger/log-to-influxdb2.sh "${{ secrets.LOGTOINFLUXURL }}" buildstatus FALSE buildresult "${{ secrets.LOGTOINFLUXTOKEN }}" $(echo ${{ github.job }}|sed 's/build-//g')
             echo "RESULT:"$(cat /tmp/hocker.build.result)
      - name: show files
        run: bash -c "ls buildlogs/  -lh1 ; tail -n 20 buildlogs/*"
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
         name: buildlogs
         path: |
              buildlogs
      - name: CHECK BUILD STATUS
        run: grep ^0$ /tmp/hocker.build.result
  scan-php56:
    runs-on: ubuntu-latest
    container: quay.io/thefoundation/library:docker-with-buildx
    needs: build-php56
    env:
      APT_HTTP_PROXY_URL: ${{ secrets.APT_HTTP_PROXY_URL }}
    environment: push-dockerhub
    permissions:
      packages: read
      contents: read
      security-events: write
    if: github.repository_owner == 'thefoundation-builder'
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: current images
        run: bash -c "docker pull quay.io/thefoundation/hocker:php5.6-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq ; docker image ls  "
      - name: Trivy vulnerability scan @ baseimage-focal
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'quay.io/thefoundation/hocker:php5.6-dropbear-fpm-imagick-redis-mariadb-npm-mongodb-rabbitmq'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab @ baseimage-focal
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: "trivy-results.sarif"

#    - name: go to repo and build
#      run: sudo /bin/bash -c "cd Hocker;/bin/bash _build.hocker.sh base-bionic"
#            !build/**/*.md
###    - name: Login
###      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
###    - name: Run Buildx
###      env:
##         EZORED_AWS_KEY_ID: ${{ secrets.EZORED_AWS_KEY_ID }}
##         EZORED_AWS_SECRET_KEY: ${{ secrets.EZORED_AWS_SECRET_KEY }}
###      run: |
###       docker buildx build -f Dockerfile -t ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:latest --output "type=image,push=true" --platform linux/amd64,linux/arm/v7,linux/arm64 .
##
